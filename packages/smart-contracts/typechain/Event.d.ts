/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EventInterface extends ethers.utils.Interface {
  functions: {
    "addModerator(address,bool)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeEventInfo((uint256,uint256,uint256,uint256,uint256,uint256,string,string,string,bool,bool))": FunctionFragment;
    "changeWhitelistRoot(bytes32)": FunctionFragment;
    "checkIn(address)": FunctionFragment;
    "checkedParticipantCount()": FunctionFragment;
    "checkedParticipants(address)": FunctionFragment;
    "description()": FunctionFragment;
    "end()": FunctionFragment;
    "getEventInfo(uint256)": FunctionFragment;
    "getRegistrationOpen(uint256)": FunctionFragment;
    "image()": FunctionFragment;
    "link()": FunctionFragment;
    "location()": FunctionFragment;
    "maxParticipants()": FunctionFragment;
    "moderators(address)": FunctionFragment;
    "name()": FunctionFragment;
    "onlyWhitelistRegistration()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "parentContractAddr()": FunctionFragment;
    "parentContractFee()": FunctionFragment;
    "participants(address)": FunctionFragment;
    "preSaleTicketPrice()": FunctionFragment;
    "publicRegister()": FunctionFragment;
    "registeredParticipantCount()": FunctionFragment;
    "registrationEnd()": FunctionFragment;
    "registrationOpen()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "start()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "ticketPrice()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokenUri()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyTicket(address)": FunctionFragment;
    "whitelistRegister(bytes32[])": FunctionFragment;
    "whitelistRoot()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addModerator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeEventInfo",
    values: [
      {
        maxParticipants: BigNumberish;
        registrationEnd: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        ticketPrice: BigNumberish;
        preSaleTicketPrice: BigNumberish;
        description: string;
        link: string;
        location: string;
        registrationOpen: boolean;
        onlyWhitelistRegistration: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWhitelistRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "checkIn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkedParticipantCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkedParticipants",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEventInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrationOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "image", values?: undefined): string;
  encodeFunctionData(functionFragment: "link", values?: undefined): string;
  encodeFunctionData(functionFragment: "location", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "moderators", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyWhitelistRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parentContractAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parentContractFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "preSaleTicketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredParticipantCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenUri", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTicket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRegister",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeEventInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWhitelistRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkedParticipantCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkedParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "image", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "location", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moderators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyWhitelistRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentContractAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentContractFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preSaleTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredParticipantCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ParticipantChecked(address)": EventFragment;
    "ParticipantRegistered(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParticipantChecked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParticipantRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ParticipantCheckedEvent = TypedEvent<
  [string] & { participant: string }
>;

export type ParticipantRegisteredEvent = TypedEvent<
  [string] & { participant: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class Event extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EventInterface;

  functions: {
    addModerator(
      addr: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeEventInfo(
      eventData: {
        maxParticipants: BigNumberish;
        registrationEnd: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        ticketPrice: BigNumberish;
        preSaleTicketPrice: BigNumberish;
        description: string;
        link: string;
        location: string;
        registrationOpen: boolean;
        onlyWhitelistRegistration: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeWhitelistRoot(
      rootHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkIn(
      participant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkedParticipantCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkedParticipants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    end(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEventInfo(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string
        ] & {
          addr: string;
          organizer: string;
          registrationOpen: boolean;
          onlyWhitelistRegistration: boolean;
          isRegistered: boolean;
          isChecked: boolean;
          maxParticipants: BigNumber;
          registrationEnd: BigNumber;
          start: BigNumber;
          end: BigNumber;
          ticketPrice: BigNumber;
          preSaleTicketPrice: BigNumber;
          registeredParticipantCount: BigNumber;
          checkedParticipantCount: BigNumber;
          name: string;
          description: string;
          link: string;
          image: string;
          location: string;
        }
      ]
    >;

    getRegistrationOpen(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    image(overrides?: CallOverrides): Promise<[string]>;

    link(overrides?: CallOverrides): Promise<[string]>;

    location(overrides?: CallOverrides): Promise<[string]>;

    maxParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

    moderators(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onlyWhitelistRegistration(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parentContractAddr(overrides?: CallOverrides): Promise<[string]>;

    parentContractFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    participants(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    preSaleTicketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicRegister(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredParticipantCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    registrationEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    registrationOpen(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    ticketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenUri(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyTicket(owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    whitelistRegister(
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistRoot(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addModerator(
    addr: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeEventInfo(
    eventData: {
      maxParticipants: BigNumberish;
      registrationEnd: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      ticketPrice: BigNumberish;
      preSaleTicketPrice: BigNumberish;
      description: string;
      link: string;
      location: string;
      registrationOpen: boolean;
      onlyWhitelistRegistration: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeWhitelistRoot(
    rootHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkIn(
    participant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkedParticipantCount(overrides?: CallOverrides): Promise<BigNumber>;

  checkedParticipants(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  description(overrides?: CallOverrides): Promise<string>;

  end(overrides?: CallOverrides): Promise<BigNumber>;

  getEventInfo(
    currTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string
    ] & {
      addr: string;
      organizer: string;
      registrationOpen: boolean;
      onlyWhitelistRegistration: boolean;
      isRegistered: boolean;
      isChecked: boolean;
      maxParticipants: BigNumber;
      registrationEnd: BigNumber;
      start: BigNumber;
      end: BigNumber;
      ticketPrice: BigNumber;
      preSaleTicketPrice: BigNumber;
      registeredParticipantCount: BigNumber;
      checkedParticipantCount: BigNumber;
      name: string;
      description: string;
      link: string;
      image: string;
      location: string;
    }
  >;

  getRegistrationOpen(
    currTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  image(overrides?: CallOverrides): Promise<string>;

  link(overrides?: CallOverrides): Promise<string>;

  location(overrides?: CallOverrides): Promise<string>;

  maxParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  moderators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onlyWhitelistRegistration(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  parentContractAddr(overrides?: CallOverrides): Promise<string>;

  parentContractFee(overrides?: CallOverrides): Promise<BigNumber>;

  participants(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  preSaleTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  publicRegister(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredParticipantCount(overrides?: CallOverrides): Promise<BigNumber>;

  registrationEnd(overrides?: CallOverrides): Promise<BigNumber>;

  registrationOpen(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenUri(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyTicket(owner: string, overrides?: CallOverrides): Promise<boolean>;

  whitelistRegister(
    _proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistRoot(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addModerator(
      addr: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeEventInfo(
      eventData: {
        maxParticipants: BigNumberish;
        registrationEnd: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        ticketPrice: BigNumberish;
        preSaleTicketPrice: BigNumberish;
        description: string;
        link: string;
        location: string;
        registrationOpen: boolean;
        onlyWhitelistRegistration: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    changeWhitelistRoot(
      rootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkIn(participant: string, overrides?: CallOverrides): Promise<void>;

    checkedParticipantCount(overrides?: CallOverrides): Promise<BigNumber>;

    checkedParticipants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    description(overrides?: CallOverrides): Promise<string>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    getEventInfo(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string
      ] & {
        addr: string;
        organizer: string;
        registrationOpen: boolean;
        onlyWhitelistRegistration: boolean;
        isRegistered: boolean;
        isChecked: boolean;
        maxParticipants: BigNumber;
        registrationEnd: BigNumber;
        start: BigNumber;
        end: BigNumber;
        ticketPrice: BigNumber;
        preSaleTicketPrice: BigNumber;
        registeredParticipantCount: BigNumber;
        checkedParticipantCount: BigNumber;
        name: string;
        description: string;
        link: string;
        image: string;
        location: string;
      }
    >;

    getRegistrationOpen(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    image(overrides?: CallOverrides): Promise<string>;

    link(overrides?: CallOverrides): Promise<string>;

    location(overrides?: CallOverrides): Promise<string>;

    maxParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    moderators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onlyWhitelistRegistration(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    parentContractAddr(overrides?: CallOverrides): Promise<string>;

    parentContractFee(overrides?: CallOverrides): Promise<BigNumber>;

    participants(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    preSaleTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    publicRegister(overrides?: CallOverrides): Promise<void>;

    registeredParticipantCount(overrides?: CallOverrides): Promise<BigNumber>;

    registrationEnd(overrides?: CallOverrides): Promise<BigNumber>;

    registrationOpen(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenUri(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyTicket(owner: string, overrides?: CallOverrides): Promise<boolean>;

    whitelistRegister(
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistRoot(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ParticipantChecked(address)"(
      participant?: null
    ): TypedEventFilter<[string], { participant: string }>;

    ParticipantChecked(
      participant?: null
    ): TypedEventFilter<[string], { participant: string }>;

    "ParticipantRegistered(address)"(
      participant?: null
    ): TypedEventFilter<[string], { participant: string }>;

    ParticipantRegistered(
      participant?: null
    ): TypedEventFilter<[string], { participant: string }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    addModerator(
      addr: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeEventInfo(
      eventData: {
        maxParticipants: BigNumberish;
        registrationEnd: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        ticketPrice: BigNumberish;
        preSaleTicketPrice: BigNumberish;
        description: string;
        link: string;
        location: string;
        registrationOpen: boolean;
        onlyWhitelistRegistration: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeWhitelistRoot(
      rootHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkIn(
      participant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkedParticipantCount(overrides?: CallOverrides): Promise<BigNumber>;

    checkedParticipants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    getEventInfo(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistrationOpen(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    image(overrides?: CallOverrides): Promise<BigNumber>;

    link(overrides?: CallOverrides): Promise<BigNumber>;

    location(overrides?: CallOverrides): Promise<BigNumber>;

    maxParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    moderators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onlyWhitelistRegistration(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parentContractAddr(overrides?: CallOverrides): Promise<BigNumber>;

    parentContractFee(overrides?: CallOverrides): Promise<BigNumber>;

    participants(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    preSaleTicketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    publicRegister(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredParticipantCount(overrides?: CallOverrides): Promise<BigNumber>;

    registrationEnd(overrides?: CallOverrides): Promise<BigNumber>;

    registrationOpen(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenUri(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyTicket(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistRegister(
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistRoot(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addModerator(
      addr: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeEventInfo(
      eventData: {
        maxParticipants: BigNumberish;
        registrationEnd: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        ticketPrice: BigNumberish;
        preSaleTicketPrice: BigNumberish;
        description: string;
        link: string;
        location: string;
        registrationOpen: boolean;
        onlyWhitelistRegistration: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeWhitelistRoot(
      rootHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkIn(
      participant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkedParticipantCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkedParticipants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    end(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEventInfo(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistrationOpen(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    image(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    link(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    location(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxParticipants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moderators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyWhitelistRegistration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentContractAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentContractFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preSaleTicketPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicRegister(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredParticipantCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrationEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registrationOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyTicket(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistRegister(
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
